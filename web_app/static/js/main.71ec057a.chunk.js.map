{"version":3,"sources":["components/Map/Map.module.scss","layouts/AppLayout/AppLayout.module.scss","components/Header/Header.module.scss","components/Navigation/Navigation.js","constants/routes.js","components/Header/Header.js","utils/googleLoader.js","constants/keys.js","constants/api.js","components/Map/Map.js","components/Loader/Loader.js","pages/Home/Home.js","pages/Map/Map.js","pages/About/About.js","layouts/AppLayout/AppLayout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","handleChange","e","path","props","history","push","BottomNavigation","onChange","this","BottomNavigationAction","label","value","icon","faHome","size","faMap","faQuestion","Component","withRouter","Header","Box","className","style","wrapper","PureComponent","console","log","process","GoogleApi","resolvers","onLoad","length","shift","resolve","window","google","loadApi","a","promise","Promise","script","document","createElement","src","head","append","addEventListener","Map","handleMapClick","latLng","state","polygons","containerRef","mapRef","searchRef","maps","api","map","center","lat","lng","zoom","autocomplete","places","Autocomplete","navigator","geolocation","getCurrentPosition","position","initialLocation","LatLng","coords","latitude","longitude","setCenter","addListener","ref","toolbar","placeholder","type","LazyMap","lazy","loadGoogleApi","default","fallback","Loader","faSpinner","spin","Home","MapPage","About","AppLayout","content","App","Container","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.71ec057a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Map_wrapper__3zHlE\",\"map\":\"Map_map__UaOG-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppLayout_wrapper__2v2AH\",\"content\":\"AppLayout_content__CczQD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__3tGRg\"};","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { BottomNavigationAction, BottomNavigation } from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome, faMap, faQuestion } from '@fortawesome/free-solid-svg-icons'\n\nimport { HOME_ROUTE, MAP_ROUTE, ABOUT_ROUTE } from '../../constants/routes';\n\n\nclass Navigation extends Component {\n\n  handleChange = (e, path) => {\n    const { history } = this.props;\n    history.push(path)\n  }\n\n  render() {\n    return (\n      <BottomNavigation onChange={this.handleChange}>\n         <BottomNavigationAction label=\"Home\" value={HOME_ROUTE} icon={<FontAwesomeIcon icon={faHome} size='2x' />} />\n         <BottomNavigationAction label=\"Map\" value={MAP_ROUTE} icon={<FontAwesomeIcon icon={faMap} size='2x' />} />\n         <BottomNavigationAction label=\"About\" value={ABOUT_ROUTE} icon={<FontAwesomeIcon icon={faQuestion} size='2x' />} />\n      </BottomNavigation>\n    );\n  }\n\n}\n\nexport default withRouter(Navigation);\n","\nexport const HOME_ROUTE = '/';\nexport const MAP_ROUTE = '/map';\nexport const ABOUT_ROUTE = '/about';\n","import React, { PureComponent } from 'react';\nimport { Box } from '@material-ui/core';\n\nimport style from './Header.module.scss';\n\nclass Header extends PureComponent {\n\n  render() {\n    return (\n      <Box className={style.wrapper}></Box>\n    );\n  }\n\n}\n\nexport default Header;\n","import { GOOGLE_API_KEY } from '../constants/keys';\nimport { API_URL } from '../constants/api';\n\nconsole.log(GOOGLE_API_KEY, API_URL);\n\nclass GoogleApi {\n\n    static resolvers = [];\n    static onLoad = () => {\n      while(this.resolvers.length) {\n        const resolve = this.resolvers.shift();\n        resolve(window.google);\n      }\n    }\n\n    static loadApi = async () => {\n      const promise = new Promise((resolve) => {\n        this.resolvers.push(resolve);\n      });\n\n      if(window.google) {\n        this.onLoad();\n        return promise;\n      }\n\n      if(this.resolvers.length === 1) {\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&libraries=places`;\n        document.head.append(script);\n        script.addEventListener('load', this.onLoad);\n      }\n      return promise;\n    }\n\n}\n\nexport default GoogleApi.loadApi;\n","export const GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;\n","\nexport const API_URL = process.env.REACT_APP_API_URL;\n","import React, { Component, Suspense, lazy } from 'react';\n\nimport loadGoogleApi from '../../utils/googleLoader';\nimport { Loader } from '../../components';\n\nimport style from './Map.module.scss';\n\nclass Map extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      polygons: [],\n    };\n\n    this.containerRef = null;\n    this.mapRef = null;\n    this.searchRef = null;\n  }\n\n  componentDidMount() {\n    const { api: { maps } } = this.props;\n    console.log(maps);\n    this.map = new maps.Map(this.mapRef, {\n      center: { lat: -34.397, lng: 150.644 },\n      zoom: 8,\n    });\n\n    this.autocomplete = new maps.places.Autocomplete(this.searchRef);\n\n    if(navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition( (position) => {\n        const initialLocation = new maps.LatLng(position.coords.latitude, position.coords.longitude);\n        this.map.setCenter(initialLocation);\n      });\n    }\n\n    this.map.addListener('click', this.handleMapClick);\n  }\n\n  handleMapClick = (e) => {\n    const { latLng } = e;\n    console.log(latLng);\n  }\n\n  render() {\n    return (\n      <div className={style.wrapper} ref={(ref) => (this.containerRef = ref)}>\n        <div className={style.toolbar}>\n          <input placeholder='Search..' ref={(ref) => (this.searchRef = ref)} type=\"text\" />\n\n        </div>\n        <div className={style.map} ref={(ref) => (this.mapRef = ref)} />\n      </div>\n    );\n  }\n\n}\n\nconst LazyMap = lazy(async () => {\n  const api = await loadGoogleApi();\n  return { default: (props) => <Map {...props} api={api} /> };\n});\n\nexport default () => {\n  return (\n    <Suspense fallback={<Loader />}>\n      <LazyMap />\n    </Suspense>\n  );\n};\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nconst Loader = () => (\n  <FontAwesomeIcon icon={faSpinner} size='2x' spin />\n);\n\nexport default Loader;\n","import React, { Component } from 'react';\n\nclass Home extends Component {\n\n  render() {\n    return (\n      <div>Home</div>\n    );\n  }\n\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nimport { Map } from '../../components';\n\nclass MapPage extends Component {\n\n  render() {\n    return (\n      <div>\n        <Map></Map>\n      </div>\n    );\n  }\n\n}\n\nexport default MapPage;\n","import React, { Component } from 'react';\n\nclass About extends Component {\n\n  render() {\n    return (\n      <div>About</div>\n    );\n  }\n\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { HOME_ROUTE, MAP_ROUTE, ABOUT_ROUTE } from '../../constants/routes';\nimport { Navigation, Header } from '../../components';\nimport { Home, Map, About } from '../../pages';\n\nimport style from './AppLayout.module.scss';\n\nclass AppLayout extends Component {\n\n  render() {\n    return (\n      <div className={style.wrapper}>\n        <Header></Header>\n        <div className={style.content}>\n          <Switch>\n            <Route path={MAP_ROUTE}>\n              <Map />\n            </Route>\n            <Route path={ABOUT_ROUTE}>\n              <About />\n            </Route>\n            <Route path={HOME_ROUTE}>\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n        <Navigation></Navigation>\n      </div>\n    );\n  }\n\n}\n\nexport default AppLayout;\n","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Container } from '@material-ui/core';\n\nimport { AppLayout } from './layouts';\n\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <Container className=\"App\">\n        <AppLayout />\n      </Container>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}